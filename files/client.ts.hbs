import {
  Client,
  ClientConfig,
  CreateClientConfig,
  User,
  UploadRequestOptions,
  OperationMetadata,
  OperationsDefinition,
  OperationRequestOptions,
  SubscriptionRequestOptions,
  SubscriptionEventHandler,
  FetchUserRequestOptions,
  UploadValidationOptions,
  ExtractProfileName,
  ExtractMeta
} from "fireboom-wundersdk/client";

import type { CustomClaims, Role } from './claims'
import type { {{> operation_partial operations=operations includeInternal=false includeResponseData=true}} } from './models'

export const WUNDERGRAPH_S3_ENABLED = {{isNotEmpty s3Providers}}
export const WUNDERGRAPH_AUTH_ENABLED = {{isNotEmpty authProviders}}

{{#if (isNotEmpty s3Providers)}}
export interface UploadResponse { key: string }

// TODO: missing upload profiles

type S3Providers ={
{{#each s3Providers}}
  {{name}}: {
    hasProfiles: {{#if uploadProfiles}}true{{else}}false{{/if}},
    profiles: {
    {{#each uploadProfiles}}
        {{@key}}: any
    {{/each}}
    }
  }
{{/each}}
}

const S3ProviderData = {
{{#each s3Providers}}
  {{name}}: {
    useSSL: {{useSSL}},
    bucketName: '{{bucketName.staticVariableContent}}',
    endpoint: '{{endpoint.staticVariableContent}}'
  }{{#unless @last}},{{/unless}}
{{/each}}
}

const S3UploadProviderData: { [provider: string]: { [profile: string]: UploadValidationOptions } } = {
{{#each s3Providers}}
  {{name}}: {
    {{#each uploadProfiles}}
      {{@key}}: {
        requireAuthentication: {{#if this.requireAuthentication}}true{{else}}false{{/if}},
        {{#if this.maxAllowedUploadSizeBytes includeZero=true}}
        maxAllowedUploadSizeBytes: {{this.maxAllowedUploadSizeBytes}},
        {{/if~}}
        {{#if this.maxAllowedFiles includeZero=true}}
        maxAllowedFiles: {{this.maxAllowedFiles}},
        {{/if~}}
        {{#if this.allowedMimeTypes}}
        allowedMimeTypes: [{{#each this.allowedMimeTypes}}'{{this}}',{{/each}}],
        {{/if~}}
        {{#if this.allowedFileExtensions}}
        allowedFileExtensions: [{{#each this.allowedFileExtensions}}'{{this}}',{{/each}}],
        {{/if}}
      },
    {{/each}}
  },
{{/each}}
}
{{/if}}

{{#if (isNotEmpty authProviders)}}
export enum AuthProviderId {
  {{#each authProviders}}
  "{{id}}" = "{{id}}",
  {{/each}}
}

export interface AuthProvider {
  id: AuthProviderId;
  login: (redirectURI?: string) => void;
}
{{/if}}

export const defaultClientConfig: ClientConfig = {
  applicationHash: "{{applicationHash}}",
  baseURL: "{{baseURL}}",
  sdkVersion: "{{sdkVersion}}",
}

export const operationMetadata: OperationMetadata = {
{{#each operations}}
  "{{path}}": {
    requiresAuthentication: {{authRequired}}
  }
  {{#unless @last}},{{/unless}}
{{/each}}
}

export class WunderGraphClient extends Client {
	query<
		OperationName extends Extract<keyof Operations['queries'], string>,
		Input extends Operations['queries'][OperationName]['input'] = Operations['queries'][OperationName]['input'],
		Data extends Operations['queries'][OperationName]['data'] = Operations['queries'][OperationName]['data']
	>(options: OperationName extends string ? OperationRequestOptions<OperationName, Input> : OperationRequestOptions) {
		return super.query<OperationRequestOptions, Data>(options);
	}
	mutate<
		OperationName extends Extract<keyof Operations['mutations'], string>,
		Input extends Operations['mutations'][OperationName]['input'] = Operations['mutations'][OperationName]['input'],
		Data extends Operations['mutations'][OperationName]['data'] = Operations['mutations'][OperationName]['data']
	>(options: OperationName extends string ? OperationRequestOptions<OperationName, Input> : OperationRequestOptions) {
		return super.mutate<OperationRequestOptions, Data>(options);
	}
	subscribe<
		OperationName extends Extract<keyof Operations['subscriptions'], string>,
		Input extends Operations['subscriptions'][OperationName]['input'] = Operations['subscriptions'][OperationName]['input'],
		Data extends Operations['subscriptions'][OperationName]['data'] = Operations['subscriptions'][OperationName]['data']
	>(
		options: OperationName extends string
			? SubscriptionRequestOptions<OperationName, Input>
			: SubscriptionRequestOptions,
		cb: SubscriptionEventHandler<Data>
	) {
		return super.subscribe(options, cb);
	}
	{{#if (isNotEmpty s3Providers)}}
    public async uploadFiles<
        ProviderName extends Extract<keyof S3Providers, string>,
        ProfileName extends ExtractProfileName<S3Providers[ProviderName]['profiles']> = ExtractProfileName<
        S3Providers[ProviderName]['profiles']
        >,
        Meta extends ExtractMeta<S3Providers[ProviderName]['profiles'], ProfileName> = ExtractMeta<
        S3Providers[ProviderName]['profiles'],
        ProfileName
        >
    >(config: UploadRequestOptions<ProviderName, ProfileName, Meta>) {
        const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined;
        return super.uploadFiles(config, profile).then((resp) => {
          if (config.appendEndpoint) {
            resp.fileKeys = resp.fileKeys.map(k => `${S3ProviderData[config.provider]}/${k}`)
          }
          return resp
        });
    }
	{{/if}}
	public login(authProviderID: Operations['authProvider'], redirectURI?: string) {
		return super.login(authProviderID, redirectURI);
	}
	public async fetchUser<TUser extends User = User<Role, CustomClaims>>(options?: FetchUserRequestOptions) {
		return super.fetchUser<TUser>(options);
	}
}

export const createClient = (config?: CreateClientConfig) => {
  return new WunderGraphClient({
    ...defaultClientConfig,
    ...config,
    operationMetadata,
    csrfEnabled: {{enableCSRFProtect}},
  });
};

export type Queries = {
{{#each operations}}
    {{#if (isAllTrue isQuery (invertBool isInternal))}}
  '{{path}}': {
    {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
    data: {{#if (equalAny engine 2)}}any{{else}}{{name}}ResponseData{{/if}}
    requiresAuthentication: {{authRequired}}
    {{#if isLiveQuery}}liveQuery: boolean{{/if}}
  }
    {{/if}}
{{/each}}
}

export type Mutations = {
{{#each operations}}
    {{#if (isAllTrue isMutation (invertBool isInternal))}}
  '{{path}}': {
    {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
    data: {{#if (equalAny engine 2)}}any{{else}}{{name}}ResponseData{{/if}}
    requiresAuthentication: {{authRequired}}
  }
    {{/if}}
{{/each}}
}

export type Subscriptions = {
{{#each operations}}
    {{#if (isAllTrue isSubscription (invertBool isInternal))}}
  '{{path}}': {
    {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
    data: {{#if (equalAny engine 2)}}any{{else}}{{name}}ResponseData{{/if}}
    requiresAuthentication: {{authRequired}}
  }
    {{/if}}
{{/each}}
}

export type LiveQueries = {
{{#each operations}}
    {{#if (isAllTrue isQuery isLiveQuery (invertBool isInternal))}}
  "{{path}}": {
    {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
    data: {{#if (equalAny engine 2)}}any{{else}}{{name}}ResponseData{{/if}}
    liveQuery: true
    requiresAuthentication: {{authRequired}}
  }
    {{/if}}
{{/each}}
}

export interface Operations extends OperationsDefinition<Queries, Mutations, Subscriptions, Role,{{#if (isNotEmpty s3Providers)}}S3Providers{{else}}{}{{/if}}{{#if (isNotEmpty authProviders)}},keyof typeof AuthProviderId{{/if}}> {}
