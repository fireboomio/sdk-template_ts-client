import {
	Client,
	ClientConfig,
	CreateClientConfig,
	User,
	UploadRequestOptions,
	UploadRequestOptionsWithProfile,
	OperationMetadata,
	OperationsDefinition,
	OperationRequestOptions,
	SubscriptionRequestOptions,
	SubscriptionEventHandler,
	FetchUserRequestOptions
	// UploadValidationOptions
} from "fireboom-wundersdk/client";

import type { CustomClaims, Role } from './claims'
import type { {{> operation_partial operations=operations includeInternal=false includeInject=false includeResponseData=true}} } from './models'

export const WUNDERGRAPH_S3_ENABLED = {{isNotEmpty s3Providers}}
export const WUNDERGRAPH_AUTH_ENABLED = {{isNotEmpty authProviders}}

{{#if (isNotEmpty s3Providers)}}
export interface UploadResponse { key: string }

// TODO: missing upload profiles

type S3Providers ={
	{{#each s3Providers}}
	{{name}}: '{{name}}'
	{{/each}}
}

const S3UploadProviderData: { [provider: string]: { [profile: string]: UploadValidationOptions } } = {
	{{#each s3Providers }}
	{{name}}: '{{name}}',
	{{/each}}
}
{{/if}}

{{#if (isNotEmpty authProviders)}}
export enum AuthProviderId {
    {{#each authProviders}}
    "{{id}}" = "{{id}}",
    {{/each}}
}

export interface AuthProvider {
    id: AuthProviderId;
    login: (redirectURI?: string) => void;
}
{{/if}}

export const defaultClientConfig: ClientConfig = {
    applicationHash: "{{applicationHash}}",
    baseURL: "{{baseURL}}",
    sdkVersion: "{{sdkVersion}}",
}

export const operationMetadata: OperationMetadata = {
{{#each operations}}
    "{{path}}": {
        requiresAuthentication: {{requiresAuthentication}}
		}
    {{#unless @last}},{{/unless}}
{{/each}}
}

export class WunderGraphClient extends Client {
	query<
		OperationName extends Extract<keyof Operations['queries'], string>,
		Input extends Operations['queries'][OperationName]['input'] = Operations['queries'][OperationName]['input'],
		Data extends Operations['queries'][OperationName]['data'] = Operations['queries'][OperationName]['data']
	>(options: OperationName extends string ? OperationRequestOptions<OperationName, Input> : OperationRequestOptions) {
		return super.query<OperationRequestOptions, Data>(options);
	}
	mutate<
		OperationName extends Extract<keyof Operations['mutations'], string>,
		Input extends Operations['mutations'][OperationName]['input'] = Operations['mutations'][OperationName]['input'],
		Data extends Operations['mutations'][OperationName]['data'] = Operations['mutations'][OperationName]['data']
	>(options: OperationName extends string ? OperationRequestOptions<OperationName, Input> : OperationRequestOptions) {
		return super.mutate<OperationRequestOptions, Data>(options);
	}
	subscribe<
		OperationName extends Extract<keyof Operations['subscriptions'], string>,
		Input extends Operations['subscriptions'][OperationName]['input'] = Operations['subscriptions'][OperationName]['input'],
		Data extends Operations['subscriptions'][OperationName]['data'] = Operations['subscriptions'][OperationName]['data']
	>(
		options: OperationName extends string
			? SubscriptionRequestOptions<OperationName, Input>
			: SubscriptionRequestOptions,
		cb: SubscriptionEventHandler<Data>
	) {
		return super.subscribe(options, cb);
	}
	{{#if (isNotEmpty s3Providers)}}
	public async uploadFiles<
		ProviderName extends Extract<keyof S3Providers, string>,
		any, any
	>(
		config: any
	) {
		{{!-- const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined; --}}
		return super.uploadFiles(config, undefined);
	}
	{{/if}}
	public login(authProviderID: Operations['authProvider'], redirectURI?: string) {
		return super.login(authProviderID, redirectURI);
	}
	public async fetchUser<TUser extends User = User<Role, CustomClaims>>(options?: FetchUserRequestOptions) {
		return super.fetchUser<TUser>(options);
	}
}

export const createClient = (config?: CreateClientConfig) => {
	return new WunderGraphClient({
		...defaultClientConfig,
		...config,
		operationMetadata,
		csrfEnabled: {{isNotEmpty authProviders}},
	});
};

export type Queries = {
{{#each (filterOperations operations 'isQuery,!isInternal' true)}}
    '{{path}}': {
        {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
        data: {{name}}ResponseData
        requiresAuthentication: {{requiresAuthentication}}
        {{#if isLiveQuery}}liveQuery: boolean{{/if}}
    }
{{/each}}
}

export type Mutations = {
{{#each (filterOperations operations 'isMutation,!isInternal' true)}}
    '{{path}}': {
        {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
        data: {{name}}ResponseData
        requiresAuthentication: {{requiresAuthentication}}
    }
{{/each}}
}

export type Subscriptions = {
{{#each (filterOperations operations 'isSubscription,!isInternal' true)}}
    '{{path}}': {
        {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
        data: {{name}}ResponseData
        requiresAuthentication: {{requiresAuthentication}}
    }
{{/each}}
}

export type LiveQueries = {
{{#each (filterOperations operations 'isMutation,isLiveQuery,!isInternal' true)}}
    "{{path}}": {
        {{#if hasInput}}input: {{name}}Input{{else}}input?: undefined{{/if}}
        data: {{name}}ResponseData
        liveQuery: true
        requiresAuthentication: {{requiresAuthentication}}
    }
{{/each}}
}

export interface Operations extends OperationsDefinition<Queries, Mutations, Subscriptions, Role,{{#if hasS3Providers}}S3Providers{{else}}{}{{/if}}{{#if hasAuthProviders}},keyof typeof AuthProviderId{{/if}}> {}
